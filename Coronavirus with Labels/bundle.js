(function (React$1, ReactDOM, d3$1) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  // const csvUrl =
  // 	'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/92b89486844866ec22d9eee2cc59f1da9d5e05ae/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv';

  const csvUrl =
    'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv';

  const parseDay = d3$1.timeParse('%m/%d/%y');

  const transform = (rawData) => {
    // Filter out rows that represent provinces or states.
    const countriesData = rawData.filter(
      (d) => !d['Province/State']
    );


  	//  Get timeseries data for each country.
    const days = rawData.columns.slice(4);
    return countriesData.map((d) => {
      const countryName = d['Country/Region'];
      
      const countryTimeseries = days.map((day) => ({
        date: parseDay(day),
        deathTotal: +d[day],
        countryName
      }));
      
      countryTimeseries.countryName = countryName;
        return countryTimeseries;
    });
  };

  const useData = () => {
    const [data, setData] = React$1.useState();
    
    React$1.useEffect(() => {
      d3$1.csv(csvUrl).then((rawData) => {
        setData(transform(rawData));
      });
    }, []);

    return data;
  };

  const XAxis = ({ xScale, innerHeight }) => {
    const ref = React$1.useRef();
    React$1.useEffect(() => {
      const xAxisG = d3$1.select(ref.current);
      const xAxis = d3$1.axisBottom(xScale)
        .tickSize(-innerHeight)
        .tickPadding(12);
      xAxisG.call(xAxis);
    }, []);
    return (
      React.createElement( 'g', {
        transform: `translate(0,${innerHeight})`, ref: ref })
    );
  };

  const YAxis = ({ yScale, innerWidth }) => {
    const ref = React$1.useRef();
    React$1.useEffect(() => {
      const yAxisG = d3$1.select(ref.current);
      const yAxis = d3$1.axisLeft(yScale)
        .tickSize(-innerWidth)
        .tickPadding(3)
      	.ticks(10, "~s");
      	//.tickFormat((tickValue) => tickValue);
      yAxisG.call(yAxis);
    }, []);
    return React.createElement( 'g', { ref: ref });
  };

  console.log(d3.Delaunay);
  const VoronoiOverlay = ({
    margin,
    innerWidth,
    innerHeight,
    allData,
    lineGenerator,
    xScale,
    xValue,
    yScale,
    yValue,
    onHover,
  }) => {
    // useMemo(() => {
    //       console.log('memoizing')
    // }, [lineGenerator]);// innerWidth, innerHeight, onHover]);
    
    return React$1.useMemo(() => {
      console.log('memoizing');
      const points = allData.map((d) => [
        lineGenerator.x()(d),
        lineGenerator.y()(d),
      ]);
      const delaunay = d3.Delaunay.from(points);
      const voronoi = delaunay.voronoi([0, 0, innerWidth + 100, innerHeight]);
      return (
        React.createElement( 'g', { className: "voronoi" },
          points.map((point, i) => (
            React.createElement( 'path', {
              onMouseEnter: () => onHover(allData[i]), d: voronoi.renderCell(i) })
          ))
        )
      );
    }, [allData, lineGenerator, innerWidth, innerHeight, onHover]);
  };

  //  const handleMouseEnter = (event) => {
  //			console.log(event).target;
  //	};

  const xValue = (d) => d.date;
  const yValue = (d) => d.deathTotal;

  const margin = { top: 40, right: 40, bottom: 30, left: 60 };

  const formatDate = d3$1.timeFormat('%b %d, %Y');
  const formatComma = d3$1.format(',');

  const Tooltip = ({ activeRow, className }) => (
    React$1__default.createElement( 'text', {
      className: className, x: -10, y: -10, 'text-anchor': 'end' },
      activeRow.countryName, ": ", formatComma(activeRow.deathTotal), " death ", activeRow.deathTotal > 1 ? 's' : '', " as of", ' ',
      formatDate(activeRow.date)
    )
  );

  const LineChart = ({ data, width, height }) => {
    const [activeRow, setActiveRow] = React$1.useState();

    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;

    const allData = React$1.useMemo(
      () =>
        data.reduce(
          (accumulator, countryTimeSeries) =>
            accumulator.concat(countryTimeSeries),
          []
        ),
      [data]
    );

    const epsilon = 1;

    const xScale = React$1.useMemo(
      () =>
        d3$1.scaleTime()
          .domain(d3$1.extent(allData, xValue))
          .range([0, innerWidth]),
      [allData, xValue]
    );

    const yScale = React$1.useMemo(
      () =>
        d3$1.scaleLog()
          .domain([epsilon, d3$1.max(allData, yValue)])
          .range([innerHeight, 0]),
      [epsilon, allData, yValue]
    );

    const lineGenerator = React$1.useMemo(
      () =>
        d3$1.line()
          .x((d) => xScale(xValue(d)))
          .y((d) => yScale(epsilon + yValue(d))),
      [xScale, xValue, yScale, yValue, epsilon]
    );

    const mostRecentDate = xScale.domain()[1];

    const handleVoronoiHover = React$1.useCallback(setActiveRow, []);

    console.log(activeRow);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', {
          transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( XAxis, { xScale: xScale, innerHeight: innerHeight }),
          React$1__default.createElement( YAxis, { yScale: yScale, innerWidth: innerWidth }),
          data.map((countryTimeseries) => {
            return (
              React$1__default.createElement( 'path', {
                className: "marker-line", d: lineGenerator(countryTimeseries) })
            );
          }),
          activeRow ? (
            React$1__default.createElement( React$1__default.Fragment, null,
              React$1__default.createElement( 'path', {
                className: "marker-line active", d: lineGenerator(
                  data.find(
                    (countryTimeseries) =>
                      countryTimeseries.countryName ===
                      activeRow.countryName
                  )
                ) }),
              React$1__default.createElement( 'g', {
                transform: `translate(${lineGenerator.x()(
                activeRow
              )},${lineGenerator.y()(activeRow)})` },
                React$1__default.createElement( 'circle', { r: 10 }),
                React$1__default.createElement( Tooltip, {
                  activeRow: activeRow, className: "tooltip-stroke" }),
                React$1__default.createElement( Tooltip, {
                  activeRow: activeRow, className: "tooltip" })
              )
            )
          ) : null,

          React$1__default.createElement( 'text', {
            className: "title", transform: `translate(0, -10)` }, "Coronavirus Global Deaths Over Time"),
          React$1__default.createElement( 'text', {
            className: "axis-label", transform: `translate(-30,${
            innerHeight / 2
          }) rotate(-90)`, 'text-anchor': "middle" }, "Cumulative Deaths"),
          React$1__default.createElement( VoronoiOverlay, {
            margin: margin, onHover: handleVoronoiHover, innerHeight: innerHeight, innerWidth: innerWidth, allData: allData, lineGenerator: lineGenerator, xScale: xScale, xValue: xValue, yScale: yScale, yValue: yValue })
        )
      )
    );
  };

  const width = window.innerWidth;
  const height = window.innerHeight;

  const App = () => {
    const data = useData();

    return data ? (
      React$1__default.createElement( LineChart, { data: data, width: width, height: height })
    ) : React$1__default.createElement( 'div', null, "Loading..." );
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,