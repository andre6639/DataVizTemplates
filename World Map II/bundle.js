(function (React$1, ReactDOM, d3$1, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useData = () => {
    const [data, setData] = React$1.useState(null);
  	console.log(data);


    React$1.useEffect(() => {
      d3$1.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
      	setData({
          land: topojson.feature(topology, land),
        	interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);
    
    return data;
  };

  const projection = d3.geoEqualEarth();
  const path = d3.geoPath(projection);
  const graticule = d3$1.geoGraticule();

  const Marks = ({ data: { land, interiors } }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      land.features.map(feature => (
        React.createElement( 'path', { className: "land", d: path(feature) })
      )),
        React.createElement( 'path', { className: "interiors", d: path(interiors) })
    )
  );

  // import {  } from 'd3';

  const width = 960;
  const height = 500;

  const App = () => {
    const data = useData();

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( Marks, { data: data })
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInVzZURhdGEuanMiLCJNYXJrcy5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganNvbiB9IGZyb20gJ2QzJztcbmltcG9ydCB7IGZlYXR1cmUsIG1lc2ggfSBmcm9tICd0b3BvanNvbic7XG5cbmNvbnN0IGpzb25VcmwgPVxuICAnaHR0cHM6Ly91bnBrZy5jb20vd29ybGQtYXRsYXNAMi4wLjIvY291bnRyaWVzLTUwbS5qc29uJztcblxuZXhwb3J0IGNvbnN0IHVzZURhdGEgPSAoKSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpO1xuXHRjb25zb2xlLmxvZyhkYXRhKTtcblxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAganNvbihqc29uVXJsKS50aGVuKHRvcG9sb2d5ID0+IHtcbiAgICAgIGNvbnN0IHsgY291bnRyaWVzLCBsYW5kIH0gPSB0b3BvbG9neS5vYmplY3RzO1xuICAgIFx0c2V0RGF0YSh7XG4gICAgICAgIGxhbmQ6IGZlYXR1cmUodG9wb2xvZ3ksIGxhbmQpLFxuICAgICAgXHRpbnRlcmlvcnM6IG1lc2godG9wb2xvZ3ksIGNvdW50cmllcywgKGEsIGIpID0+IGEgIT09IGIpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSwgW10pO1xuICBcbiAgcmV0dXJuIGRhdGE7XG59OyIsImltcG9ydCB7IGdlb1BhdGgsIGdlb05hdHVyYWxFYXJ0aDEsIGdlb0dyYXRpY3VsZSB9IGZyb20gJ2QzJztcblxuY29uc3QgcHJvamVjdGlvbiA9IGQzLmdlb0VxdWFsRWFydGgoKTtcbmNvbnN0IHBhdGggPSBkMy5nZW9QYXRoKHByb2plY3Rpb24pO1xuY29uc3QgZ3JhdGljdWxlID0gZ2VvR3JhdGljdWxlKCk7XG5cbmV4cG9ydCBjb25zdCBNYXJrcyA9ICh7IGRhdGE6IHsgbGFuZCwgaW50ZXJpb3JzIH0gfSkgPT4gKFxuICA8ZyBjbGFzc05hbWU9XCJtYXJrc1wiPlxuICAgIDxwYXRoIGNsYXNzTmFtZT1cInNwaGVyZVwiIGQ9e3BhdGgoeyB0eXBlOiAnU3BoZXJlJyB9KX0gLz5cbiAgICA8cGF0aCBjbGFzc05hbWU9XCJncmF0aWN1bGVzXCIgZD17cGF0aChncmF0aWN1bGUoKSl9IC8+XG4gICAge2xhbmQuZmVhdHVyZXMubWFwKGZlYXR1cmUgPT4gKFxuICAgICAgPHBhdGggY2xhc3NOYW1lPVwibGFuZFwiIGQ9e3BhdGgoZmVhdHVyZSl9IC8+XG4gICAgKSl9XG4gICAgICA8cGF0aCBjbGFzc05hbWU9XCJpbnRlcmlvcnNcIiBkPXtwYXRoKGludGVyaW9ycyl9IC8+XG4gIDwvZz5cbik7XG4iLCIvLyBpbXBvcnQgeyAgfSBmcm9tICdkMyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyB1c2VEYXRhIH0gZnJvbSAnLi91c2VEYXRhJztcbmltcG9ydCB7IE1hcmtzIH0gZnJvbSAnLi9NYXJrcyc7XG5cbmNvbnN0IHdpZHRoID0gOTYwO1xuY29uc3QgaGVpZ2h0ID0gNTAwO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB1c2VEYXRhKCk7XG5cbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuIDxwcmU+TG9hZGluZy4uLjwvcHJlPjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHN2ZyB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fT5cbiAgICAgIDxNYXJrcyBkYXRhPXtkYXRhfSAvPlxuICAgIDwvc3ZnPlxuICApO1xufTtcbmNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKTtcblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCByb290RWxlbWVudCk7XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VF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