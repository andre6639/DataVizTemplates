(function (React$1, ReactDOM, d3$1, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);


    React$1.useEffect(() => {
      d3$1.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
      	setData({
          land: topojson.feature(topology, land),
        	interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);
    
    return data;
  };

  const csvUrl =
    'https://gist.githubusercontent.com/andre6639/d9c674f2833eddf18885db0f88276c76/raw/8d276caf72686ba783c16882b8db523c168810a7/worldcities_+50,000pop_conicse.csv';

  console.log(csvUrl);

  const useCities = () => {
    const [data, setData] = React$1.useState(null);

    const row = (d) => {
      d.lat = +d.lat;
      d.lng = +d.lng;
      d.population = +d.population;
      return d;
    };

    React$1.useEffect(() => {
      d3$1.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const projection = d3.geoEqualEarth();
  const path = d3.geoPath(projection);
  const graticule = d3$1.geoGraticule();

  const Marks = ({
    worldAtlas: { land, interiors },
    cities,
    sizeScale,
    sizeValue,
  }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      land.features.map((feature) => (
        React.createElement( 'path', { className: "land", d: path(feature) })
      )),
      React.createElement( 'path', { className: "interiors", d: path(interiors) }),
      cities.map((d) => {
        const [x, y] = projection([d.lng, d.lat]);
        return React.createElement( 'circle', { cx: x, cy: y, r: sizeScale(sizeValue(d)) })
      })
    )
  );

  // import {  } from 'd3';


  const width = 960;
  const height = 500;

  const App = () => {
    const worldAtlas = useWorldAtlas();
    const cities = useCities();

    if (!worldAtlas || !cities) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    const sizeValue = d => d.population;
    const maxRadius = 12;
    
    const sizeScale = d3$1.scaleSqrt()
    	.domain([0, d3$1.max(cities, sizeValue)])
    	.range ([0, maxRadius]);

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( Marks, { worldAtlas: worldAtlas, cities: cities, sizeScale: sizeScale, sizeValue: sizeValue })
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,